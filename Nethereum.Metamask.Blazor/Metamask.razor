@using Microsoft.AspNetCore.Components.Authorization
@using Nethereum.UI
@implements IDisposable;
@inject MetamaskHostProvider _metamaskHostProvider;
@inject SelectedEthereumHostProviderService _selectedHostProvider;

<div>
    @if (MetamaskAvailable)
    {
        <AuthorizeView Roles="EthereumConnected">
            <Authorized>
                @SelectedAccount
            </Authorized>
            <NotAuthorized>
                <button type="button" class="btnMetamask" @onclick="@EnableEthereumAsync">Connect Metamask</button>
            </NotAuthorized>
        </AuthorizeView>
    }else{
          <button class="btnMetamask" disabled>Please Install Metamask</button>   
    }
</div>

@code {

    bool MetamaskAvailable { get; set; }
    string SelectedAccount { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _metamaskHostProvider.SelectedAccountChanged += MetamaskHostProvider_SelectedAccountChanged;
            MetamaskAvailable = await _metamaskHostProvider.CheckProviderAvailabilityAsync();
            if (MetamaskAvailable)
            {
               SelectedAccount = await _metamaskHostProvider.GetProviderSelectedAccountAsync();
            }
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _metamaskHostProvider.SelectedAccountChanged -= MetamaskHostProvider_SelectedAccountChanged;
    }

    private async Task MetamaskHostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount = account;
        this.StateHasChanged();
    }

     protected async Task EnableEthereumAsync()
    {
        SelectedAccount = await _metamaskHostProvider.EnableProviderAsync();

    }
   
}

